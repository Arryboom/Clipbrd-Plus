using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using Drawing = System.Drawing;
using Forms = System.Windows.Forms;
using System.Configuration;
using System.Diagnostics;
using MaterialDesignThemes.Wpf;
using System.Runtime.InteropServices;
using System.Threading;
using NHotkey.Wpf;

namespace Clipbrd_Plus
{
    /// <summary>
    /// StartWindow.xaml 的交互逻辑
    /// </summary>

    public partial class StartWindow : Window
    {
        public StartWindow()
        {

            InitializeComponent();

            //防止程序多开
            bool isRun = false;
            Mutex mutex = new Mutex(true, "Clipbrd Plus.exe", out isRun);
            if (!isRun)
            {
                MessageBox.Show("The program has been started!", "Tips", MessageBoxButton.OK, MessageBoxImage.Information);
                Environment.Exit(1);
            }


            ReadConfig();//读取配置
            ReadHotKeyReg();//注册快捷键

        }







        private void ReadHotKeyReg()
        {

            //注册打开显示设置页面
            PublicFuncition.RegHotKey(Properties.Settings.Default.HKShowSet, "CBP_ShowSet");

            //注册打开历史记录快捷键
            PublicFuncition.RegHotKey(Properties.Settings.Default.HKShowHistory, "CBP_ShowHistory");

            //注册显示上一条的快捷键
            PublicFuncition.RegHotKey(Properties.Settings.Default.HKLastOne, "CBP_ShowLastOne");

            //注册显示上一条并粘贴的快捷键
            PublicFuncition.RegHotKey(Properties.Settings.Default.HKLastOnePaste, "CBP_ShowLastOnePaste");

            //注册显示下一条的快捷键
            PublicFuncition.RegHotKey(Properties.Settings.Default.HKNextOne, "CBP_ShowNextOne");

            //注册显示下一条并粘贴的快捷键
            PublicFuncition.RegHotKey(Properties.Settings.Default.HKNextOnePaste, "CBP_ShowLastOnePaste");

            //注册贴图到窗口的快捷键
            PublicFuncition.RegHotKey(Properties.Settings.Default.HKPasteToWindow, "CBP_PasteToWindow");

            //注册显示隐藏贴图的快捷键
            PublicFuncition.RegHotKey(Properties.Settings.Default.HKShowHide, "CBP_ShowHide");
        }




        //读取配置
        private void ReadConfig()
        {


            // bool StaringRun = Convert.ToBoolean(ConfigurationManager.AppSettings["StaringRun"]);
            bool firstRun = ClipBoardSet.Default.FirstRun;



            if (firstRun == true)
            {
                Window settingWindow = new MainWindow();
                settingWindow.Show();
                MyVariable.Variable.SettingLoaded = true;
                ClipBoardSet.Default.FirstRun = false;
                ClipBoardSet.Default.Save();
            }
            else
            {
                this.Hide();
            }


            int index = ClipBoardSet.Default.LanguageIndex;//取语言索引
            PublicFuncition.LanguageShow(index);//设置语言
            InitializationIcon(); //初始化托盘图标


        }



        //初始化托盘图标及右键菜单
        public Forms.NotifyIcon NotifyIcon;

        private void InitializationIcon()
        {
            //this.NotifyIcon = new Forms.NotifyIcon();
            this.NotifyIcon = new Forms.NotifyIcon();
            this.NotifyIcon.BalloonTipText = TbNotifyIconInfo.Text; //启动时提示用户已置托盘
            this.NotifyIcon.ShowBalloonTip(2000); //提示隐藏时间
            this.NotifyIcon.Text = TbNotifyIconInfo.Text; //鼠标悬停提示
            this.NotifyIcon.Icon = new Drawing.Icon(@"icon/icon.ico"); //设置程序托盘图标
            this.NotifyIcon.Visible = true; //显示程序托盘图标

            //双击图标弹出历史记录页面
            // NotifyIcon.MouseDoubleClick += NotifyIcon_MouseDoubleClick1;


            NotifyIcon.MouseClick += NotifyIcon_MouseClick;
            //   object NotifyIconSet = FindResource("NotifyIconSet");
            System.Windows.Forms.MenuItem notifyMenuItem1 = new Forms.MenuItem(TbNotifyIconSet.Text);
            notifyMenuItem1.Click += NotifyMenuItem_Click; //托盘图标单击弹出设置页面

            // object NotifyIconHistory = FindResource("NotifyIconHistory");
            System.Windows.Forms.MenuItem notifyMenuItem2 = new Forms.MenuItem(TbNotifyIconHistory.Text);
            notifyMenuItem2.Click += NotifyMenuItem2_Click; //托盘图标单击弹出历史记录页面

            // object NotifyIconExit = FindResource("NotifyIconExit");
            System.Windows.Forms.MenuItem notifyMenuItem3 = new Forms.MenuItem(TbNotifyIconExit.Text);
            notifyMenuItem3.Click += NotifyMenuItem3_Click; //托盘图标单击退出

            System.Windows.Forms.MenuItem[] notifyItems = new Forms.MenuItem[]
                {notifyMenuItem1, notifyMenuItem2, notifyMenuItem3}; //创建右键菜单目录集合
            this.NotifyIcon.ContextMenu = new Forms.ContextMenu(notifyItems); //绑定右键菜单到控件


        }




        //关闭程序
        private void NotifyMenuItem3_Click(object sender, EventArgs e)
        {
            MyVariable.Variable.SettingLoaded = false;
            this.NotifyIcon.Visible = false;//清除程序的托盘图标
            MyVariable.Variable.SettingLoaded = false;
            this.NotifyIcon.Icon.Dispose();//释放图标资源
            Application.Current.Shutdown();
        }


        //弹出历史记录页面
        private void NotifyMenuItem2_Click(object sender, EventArgs e)
        {

            PublicFuncition.ShowHistoryCenter();
        }

        //弹出设置页面
        private void NotifyMenuItem_Click(object sender, EventArgs e)
        {
           PublicFuncition. ShowSetting();
        }





        //单击弹出历史记录页面
        private void NotifyIcon_MouseClick(object sender, Forms.MouseEventArgs e)
        {

            //如果历史记录窗口已经打开，则关闭，否则判断是不是需要新建窗口
            if (MyVariable.Variable.TempLoadedHistory == true)
            {
                foreach (Window window in Application.Current.Windows)
                {
                    if (window.Title is "history")
                    {
                        //window.ShowInTaskbar = false;
                        window.Close();
                    }

                }
            }
            else
            {
                //如果按下的是左键，则执行显示代码
                if (e.Button == Forms.MouseButtons.Left)
                {
                    // Point MousePoint = new Point(Forms.Control.MousePosition.X, Forms.Control.MousePosition.Y);//取鼠标坐标位置

                    // int TaskBarHeight=(Forms.Screen.PrimaryScreen.Bounds.Height- Forms.SystemInformation.WorkingArea.Height );//取任务栏高度
                    int x = Forms.Control.MousePosition.X;
                    int y = Forms.SystemInformation.WorkingArea.Height;//取工作区（除开任务栏之外的屏幕区域），让程序界面刚好显示在任务栏上方！

                    // MessageBox.Show(TaskBarHeight.ToString());
                    MyVariable.Variable.TempLoadedHistory = true;
                  PublicFuncition.  ShowHistory(x, y);

                }

            }

        }







        //如果setting窗口已经打开，则切换至该窗口，否则打开新setting窗口



        private void StartWindow_OnClosing(object sender, CancelEventArgs e)
        {
            NotifyIcon.Visible = false;

        }
    }

}


