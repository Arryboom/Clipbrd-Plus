using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using Application = System.Windows.Application;
using KeyEventArgs = System.Windows.Forms.KeyEventArgs;
using GlobalHotKey;


namespace Clipbrd_Plus
{
    class PublicFuncition
    {
        //获取屏幕宽度
        public static int GetScreenWidth()
        {
            int x = System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Size.Width;
            return x;
        }

        //获取屏幕高度
        public static int GetScreenHeight()
        {
            int x = System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Size.Height;
            return x;
        }




        //[DllImport("user32.dll", SetLastError = true)]
        //public static extern bool GetCursorPos(out Point pt);//只能取当前窗体内的鼠标坐标
        //private static extern IntPtr GetDC(IntPtr hwnd);//返回设备场景句柄，用来取全局鼠标坐标



        /// <summary>
        /// 通过查找窗口标题关闭窗口
        /// </summary>
        /// <param name="name">窗口标题</param>

        //通过指定关键字查询并关闭窗口
        public static void FindCloseWindow(string name)
        {
            if (MyVariable.Variable.TempLoadedHistory == true)
            {
                foreach (Window window in Application.Current.Windows)
                {
                    if (window.Title == name)
                    {
                        //window.ShowInTaskbar = false;
                        window.Close();
                    }

                }
            }
        }



        /// <summary>
        /// 设置程序显示语言
        /// </summary>
        /// <param name="LanguageTag">程序中已包含的语言字典名称，例如zh-CN</param>
        //设置语言
        public static void SetLanguage(string LanguageTag)
        {
            List<ResourceDictionary> dictionaryList = new List<ResourceDictionary>();
            foreach (ResourceDictionary dictionary in Application.Current.Resources.MergedDictionaries)
            {
                dictionaryList.Add(dictionary);
            }

            string requestedCulture = string.Format(@"Language\{0}.xaml", LanguageTag);

            Uri reUri = new Uri(requestedCulture, UriKind.Relative);
            ResourceDictionary rdDictionary = (ResourceDictionary)Application.LoadComponent(reUri);
            Application.Current.Resources.MergedDictionaries.Remove(rdDictionary);
            Application.Current.Resources.MergedDictionaries.Add(rdDictionary);








        }

        //应用语言显示设置
        public static void LanguageShow(int num)
        {
            switch (num)
            {
                case 0:
                    PublicFuncition.SetLanguage("zh-CN");
                    break;
                case 1:
                    PublicFuncition.SetLanguage("en-US");
                    break;
            }
        }

        //ResourceDictionary resourceDictionary = dictionaryList.FirstOrDefault(d => d.Source.OriginalString.Equals(requestedCulture));
        //MessageBox.Show(resourceDictionary.ToString());

        //Application.Current.Resources.MergedDictionaries.Remove(resourceDictionary);
        //Application.Current.Resources.MergedDictionaries.Add(resourceDictionary);
        //if (resourceDictionary != null)

        //{
        //    Application.Current.Resources.MergedDictionaries.Remove(resourceDictionary);
        //    Application.Current.Resources.MergedDictionaries.Add(resourceDictionary);

        //}



        //修改配置
        public static void ReviseConfig(string key, string value)
        {
            //Configuration configuration = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
            //configuration.AppSettings.Settings[key].Value = value;
            //configuration.Save();
        }



        public static string ShowHotKey(System.Windows.Input.KeyEventArgs e)
        {
            int keynum = Convert.ToInt32(Keyboard.Modifiers);
            string tempKey;
            if (keynum != 0)
            {
                switch (keynum)
                {
                    case 1:
                        tempKey = "Alt";
                        break;
                    case 2:
                        tempKey = "Ctrl";
                        break;
                    case 3:
                        tempKey = "Ctrl+Alt";
                        break;
                    case 4:
                        tempKey = "Shift";
                        break;
                    case 5:
                        tempKey = "Shift+Alt";
                        break;
                    case 6:
                        tempKey = "Ctrl+Shift";
                        break;
                    case 7:
                        tempKey = "Ctrl+Shift+Alt";
                        break;
                    default:
                        tempKey = null;
                        break;
                }

                int ekeynum = Convert.ToInt32(e.Key);

                if ((ekeynum < 116 || ekeynum > 121) && ekeynum != 156)
                {
                    tempKey = tempKey + "+" + e.Key.ToString();
                    MyVariable.Variable.HotKeyCode = keynum.ToString() + ekeynum.ToString();
                    return tempKey;
                }
                else
                {
                    MyVariable.Variable.HotKeyCode = null;
                    return null;
                }
            }
            else
            {
                MyVariable.Variable.HotKeyCode = null;
                return null;
            }


        }

        //注册快捷键
        public static void RegHotKey(string TempKey)
        {
            if (TempKey != null)
            {
                int index = TempKey.IndexOf("|");
                if (index > -1)
                {
                    string tmpKey = TempKey.Substring(index + 1, TempKey.Length - index - 1);

                    int mymodcode = Convert.ToInt32(tmpKey.Substring(0, 1));

                    string mykeycode = tmpKey.Substring(1, tmpKey.Length - 1);

                    int keyText = Convert.ToInt32(mykeycode);
                    Key keys = (Key)keyText;



                    HotKey hotkey;
                    HotKeyManager hotKeyManager = new HotKeyManager();

                    switch (mymodcode)
                    {
                        case 1:
                            try
                            {
                                hotkey = hotKeyManager.Register(keys, ModifierKeys.Alt);
                                
                            }
                            catch (Exception e)
                            {
                                MessageBox.Show(e.Message);
                            }

                            break;

                        case 2:
                            try
                            {
                                hotkey = hotKeyManager.Register(keys, ModifierKeys.Control);
                                
                            }
                            catch (Exception e)
                            {
                                MessageBox.Show(e.Message);
                            }

                            break;
                        case 3:
                            try
                            {
                                hotKeyManager.Register(keys, ModifierKeys.Control | ModifierKeys.Alt);
                            }
                            catch (Exception e)
                            {
                                MessageBox.Show(e.Message);

                            }

                            break;
                        case 4:

                            try
                            {
                                hotKeyManager.Register(keys, ModifierKeys.Shift);
                            }
                            catch (Exception e)
                            {
                                MessageBox.Show(e.Message);

                            }
                            break;
                        case 5:
                            try
                            {
                                hotKeyManager.Register(keys, ModifierKeys.Shift | ModifierKeys.Alt);
                            }
                            catch (Exception e)
                            {
                                MessageBox.Show(e.Message);

                            }

                            break;
                        case 6:
                            try
                            {
                                hotKeyManager.Register(keys, ModifierKeys.Control | ModifierKeys.Shift);
                            }
                            catch (Exception e)
                            {
                                MessageBox.Show(e.Message);

                            }

                            break;
                        case 7:
                            try
                            {
                                hotKeyManager.Register(keys, ModifierKeys.Control | ModifierKeys.Shift | ModifierKeys.Alt);
                            }
                            catch (Exception e)
                            {
                                MessageBox.Show(e.Message);

                            }

                            break;
                    }

                 //   hotKeyManager.Dispose();
                }




            }





        }

        //注销快捷键
        public static void UnRegHotKey(string TempKey)
        {
            if (TempKey != null)
            {
                int index = TempKey.IndexOf("|");
                if (index > -1)
                {
                    string tmpKey = TempKey.Substring(index + 1, TempKey.Length - index - 1);

                    int mymodcode = Convert.ToInt32(tmpKey.Substring(0, 1));
                    string mykeycode = tmpKey.Substring(1, tmpKey.Length - 1);
                    int keyText = Convert.ToInt32(mykeycode);
                    Key keys = (Key)keyText;


                    //临时快捷键缓存

                    HotKeyManager hotKeyManager = new HotKeyManager();

                    switch (mymodcode)
                    {
                        case 1:
                            hotKeyManager.Unregister(keys, ModifierKeys.Alt);
                            break;
                        case 2:
                            hotKeyManager.Unregister(keys, ModifierKeys.Control);
                            break;
                        case 3:
                            hotKeyManager.Unregister(keys, ModifierKeys.Control | ModifierKeys.Alt);
                            break;
                        case 4:
                            hotKeyManager.Unregister(keys, ModifierKeys.Shift);
                            break;
                        case 5:
                            hotKeyManager.Unregister(keys, ModifierKeys.Shift | ModifierKeys.Alt);
                            break;
                        case 6:
                            hotKeyManager.Unregister(keys, ModifierKeys.Control | ModifierKeys.Shift);
                            break;
                        case 7:
                            hotKeyManager.Unregister(keys, ModifierKeys.Control | ModifierKeys.Shift | ModifierKeys.Alt);
                            break;
                    }

                 //   hotKeyManager.Dispose();
                }

            }
        }


        
        /// <summary>
        /// 文本转key,返回一个Key值(键盘按键)
        /// </summary>
        /// <param name="str">Key 文本代码</param>
        /// <returns></returns>
        public static Key Text2Key(string str)
        {
            if (str != null)
            {
                int index = str.IndexOf("|");
                string key1 = str.Substring(index + 2, str.Length - index - 2);
                int keyText = Convert.ToInt32(key1);
                Key keys = (Key)keyText;
                return keys;
            }

            return Key.None;

        }
    }
}